// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole  @default(USER)
  accounts           Account[]
  isTwoFactorEnabled Boolean   @default(false)
  favouriteIds String[] 
  listings Listing[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id           String @id @default(cuid())
  name         String
 

  listings Listing[]


  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Size{
  id     String @id @default(cuid())
  name String
  bedroomCount String


  listings Listing[]


   updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}


model Listing {
  id String @id @default(cuid())

  userId String 
  agent User @relation(fields: [userId],references: [id],onDelete: Cascade)

  County String
  subCounty String
  area String

  sizeId String
  size Size @relation(fields: [sizeId],references: [id])
  
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  title         String
  description   String
  bathroomCount String
  amenities    String

  security Boolean ?
  parking Boolean ?
  internetCoverage Boolean?
  pool Boolean?
  waterSupply Boolean?
 
  coverage      String
  images        Image[]
  rentalPrice   Decimal?
  purchasePrice Decimal?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  
}


model Image {
  id String @id @default(cuid())

  url String

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])
}
